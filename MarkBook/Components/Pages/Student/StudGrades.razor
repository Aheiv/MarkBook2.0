@page "/student/grades"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.MainLayout
@rendermode InteractiveServer
<style>
	table {
		width: 2000px;
		border-spacing: 0;
	}

	td, {
		border: solid 1px;
		white-space: nowrap;
		border-top-width: 0px;
	}

	.container {
		width: 1800px;
		overflow: scroll;
		margin-left: 5em;
		overflow-y: hidden;
		padding: 0;
	}

	.headcol {
		position: absolute;
		left: 0;
		top: auto;
		border-top-width: 1px;
	}
</style>
<div>
	@if (!loading)
		{
		<label for="quarter">Четверть</label>
		<InputSelect name="quarter" @bind-Value="quarter">
			<option value="1-ая">1-ая</option>
			<option value="2-ая">2-ая</option>
			<option value="3-я">3-я</option>
			<option value="4-ая">4-ая</option>
		</InputSelect>
		<label for="student">Ученик</label>
		<InputSelect name="sstudent" @bind-Value="sstudent">
			@foreach (Data.Database.Model.Student student in students)
			{
				fio = $"{student.surname} {student.name.Substring(0, 1)}.{student.patronymic.Substring(0, 1)}.";
				<option value="@fio">@fio</option>
			}
		</InputSelect>
		<div class="container h-50 py-10">
			<table class="table table-striped">
				<thead>
					<tr>
						<th scope="row">Предмет\Дата</th>
						@if (quarter == "1-ая")
						{
							@for (int i = 0; i < dateend1.DayOfYear - date1.DayOfYear; i++)
							{
								<th scope="row" nowrap>@date1.AddDays(i).Day/@date1.AddDays(i).Month/@date1.AddDays(i).Year</th>
							}
							<th scope="row" nowrap>Оценка за четверть</th>
						}
						else if (quarter == "2-ая")
						{
							@for (int i = 0; i < dateend2.DayOfYear - date2.DayOfYear; i++)
							{
								<th scope="row" nowrap>@date2.AddDays(i).Day/@date2.AddDays(i).Month/@date2.AddDays(i).Year</th>
							}
							<th scope="row" nowrap>Оценка за четверть</th>
						}
						else if (quarter == "3-я")
						{
							@for (int i = 0; i < dateend3.DayOfYear - date3.DayOfYear; i++)
							{
								<th scope="row" nowrap>@date3.AddDays(i).Day/@date3.AddDays(i).Month/@date3.AddDays(i).Year</th>
							}
							<th scope="row" nowrap>Оценка за четверть</th>
						}
						else if (quarter == "4-ая")
						{
							@for (int i = 0; i < dateend4.DayOfYear - date4.DayOfYear; i++)
							{
								<th scope="row" nowrap>@date4.AddDays(i).Day/@date4.AddDays(i).Month/@date4.AddDays(i).Year</th>
							}
							<th scope="row" nowrap>Оценка за четверть</th>
						}
				</tr>
				</thead>
				<tbody>
					@foreach (Data.Database.Model.Student student in students.Where(s => s.surname == sstudent.Split(" ")[0]))
					{
						@foreach (Data.Database.Model.Subject subject in subjects)
						{
							<tr>
								<th class="headcol">@subject.name</th>
								@foreach (Data.Database.Model.Subject_Student_Mark ssm in s_s_m.Where(ss => ss.Student.surname == sstudent.Split(" ")[0] &&
																											ss.Subject.id_subject == subject.id_subject))
								{
									int? avg = 0;
									int? num = 0;
									@foreach (Data.Database.Model.Date dat in dates.Where(d => d.quarter == quarter))

									{
											for (int i = 0; i < dat.date_end.DayOfYear - dat.date_start.DayOfYear; i++)
											{
												if (ssm.Mark.date.DayOfYear == dat.date_end.AddDays(i).DayOfYear)
												{
													if (ssm.Mark.grade != null)
													{
														{
															avg += ssm.Mark.grade;
															num++;
														}
														<td>
															@ssm.Mark.grade
														</td>
													}
													else if (ssm.Mark.appointment != null)
													{
														<td>
															@ssm.Mark.appointment
														</td>
													}
												}
												else
												{
													<td>

													</td>
												}
											}
										}
									
									if (num != 0)
									{
										avg = avg / num;
										<td>@avg</td>
									}
								}
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
		}
</div>
		@code {
		private bool loading = true;
		private string quarter = "1-ая";
		private string sstudent = "Иванов И.И.";
		private string fio =" ";

	protected override async Task OnInitializedAsync()
	{
		await LoadMarks();
		await LoadSubjects();
		await LoadGrades();
		await LoadStudents();
		await LoadS_S_M();
		await LoadDates();
	}
	private List<Data.Database.Model.Student> students;

	private async Task LoadStudents()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			students = await db.Students.Include(s => s.Grade).ToListAsync();
		}
		loading = false;
	}
	private List<Data.Database.Model.Mark> marks;

	private async Task LoadMarks()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			marks = await db.Marks.ToListAsync();
		}
		loading = false;
	}

	private List<Data.Database.Model.Subject> subjects;

	private async Task LoadSubjects()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			subjects = await db.Subjects.ToListAsync();
		}
		loading = false;
	}

	private List<Data.Database.Model.Subject_Student_Mark> s_s_m;

	private async Task LoadS_S_M()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			s_s_m = await db.Subject_Student_Mark.Include(s => s.Mark).Include(s => s.Student).Include(s => s.Subject).ToListAsync();
		}
		loading = false;
	}
	private List<Data.Database.Model.Grade> grades;

	private async Task LoadGrades()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			grades = await db.Grades.ToListAsync();
		}
		loading = false;
	}
	private List<Data.Database.Model.Date> dates;

	private async Task LoadDates()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			dates = await db.Dates.ToListAsync();
		}
		loading = false;
	}
	DateOnly date1 = new DateOnly(2023, 9, 4);
	DateOnly dateend1 = new DateOnly(2023, 10, 27);
	DateOnly date2 = new DateOnly(2023, 11, 6);
	DateOnly dateend2 = new DateOnly(2023, 12, 26);
	DateOnly date3 = new DateOnly(2024, 1, 15);
	DateOnly dateend3 = new DateOnly(2024, 3, 22);
	DateOnly date4 = new DateOnly(2024, 4, 1);
	DateOnly dateend4 = new DateOnly(2024, 5, 25);
}
