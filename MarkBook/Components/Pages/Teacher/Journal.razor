@page "/teacher/marks"
@using Microsoft.EntityFrameworkCore
@using MarkBook.Data.Database.Model

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.LeaveLayout
@rendermode InteractiveServer

<style>
	table {
		display: block;
		overflow-x: auto;
		white-space: nowrap;
	}
</style>

<div>
	<div class="container h-50 py-10 d-flex justify-content-end">
		<select @bind="n">
			<option value="marks">Выставление оценок</option>
			<option value="avg">Оценки за четверть</option>
			<option value="apps">Сводная ведомость учёта посещаемости</option>
			<option value="miss">Сведения о количестве уроков, пропущенных обучающимися</option>
			<option value="info">Общие сведения об обучающихся</option>
		</select>
	</div>

	<div class="container h-50 py-10">
		@if (!loading)
		{
			@if (n == "marks")
			{
				<div>
					<label for="grade">Класс</label>
					<select name="grade" @bind="ggrade">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Grade.Name))
						{
							<option value="@teacherSubjectGrade.Grade.Id">@teacherSubjectGrade.Grade.Name@teacherSubjectGrade.Grade.Subname</option>
						}
					</select>
					<label for="subject">Предмет</label>
					<select name="subject" @bind="ssubject">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Subject.Name))
						{
							<option value="@teacherSubjectGrade.Subject.Id">@teacherSubjectGrade.Subject.Name</option>
						}
					</select>
					<label for="quarter">Четверть</label>
					<select name="quarter" @bind="qquarter">
						@foreach (Data.Database.Model.QuarterDate quarterDate in quarterDates.Where(q => q.StudyYear.Years == "2023-2024"))
						{
							<option value="@quarterDate.Number">@quarterDate.Number</option>
						}
					</select>
					@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(tsg => tsg.Teacher.id == 1 &&
																																						tsg.Grade.Id == ggrade &&
																																						tsg.Subject.Id == ssubject))
					{
						tsg = teacherSubjectGrade.Id;
					}
				</div>
				<div>
					<table class="table table-striped">
						<thead>
							<tr>
								<th scope="col">Фио/Дата</th>
								@foreach (Data.Database.Model.QuarterDate quarterDate in quarterDates.Where(q => q.StudyYear.Years == "2023-2024"
																					&& q.Number == qquarter))
								{
									for (int i = 0; i < quarterDate.DateOfEnd.DayOfYear - quarterDate.DateOfStart.DayOfYear; i++)
									{
										if (quarterDate.DateOfStart.AddDays(i).Day < 10 && quarterDate.DateOfStart.AddDays(i).Month < 10)
										{
											string day = $"0{quarterDate.DateOfStart.AddDays(i).Day}/0{quarterDate.DateOfStart.AddDays(i).Month}";
											string year = $"{quarterDate.DateOfStart.AddDays(i).Year.ToString()}";
											<th scope="col">@day/@year.Substring(year.Length-2)</th>
										}
										else if (quarterDate.DateOfStart.AddDays(i).Day < 10 && quarterDate.DateOfStart.AddDays(i).Month >= 10)
										{
											string day = $"0{quarterDate.DateOfStart.AddDays(i).Day}";
											string year = $"{quarterDate.DateOfStart.AddDays(i).Year.ToString()}";
											<th scope="col">@day/@quarterDate.DateOfStart.AddDays(i).Month/@year.Substring(year.Length - 2)</th>
										}
										else if (quarterDate.DateOfStart.AddDays(i).Month < 10 && quarterDate.DateOfStart.AddDays(i).Day >= 10)
										{
											string day = $"0{quarterDate.DateOfStart.AddDays(i).Month}";
											string year = $"{quarterDate.DateOfStart.AddDays(i).Year.ToString()}";
											<th scope="col">@quarterDate.DateOfStart.AddDays(i).Day/@day/@year.Substring(year.Length - 2)</th>
										}
										else
										{
											string year = $"{quarterDate.DateOfStart.AddDays(i).Year.ToString()}";
											<th scope="col">@quarterDate.DateOfStart.AddDays(i).Day/@quarterDate.DateOfStart.AddDays(i).Month/@year.Substring(year.Length - 2)</th>
										}
									}
								}
							</tr>
						</thead>
						<tbody>
							@foreach (Data.Database.Model.Student student in students.Where(s => s.Grade.Id == ggrade))
							{

								int t = 0;

								<tr>
									<th scope="row">@student.LastName @student.FirstName.Substring(0, 1).@student.Patronymic.Substring(0, 1).</th>
									@foreach (Data.Database.Model.QuarterDate quarterDate in quarterDates.Where(q => q.StudyYear.Years == "2023-2024"
																									&& q.Number == qquarter))
									{
										@foreach (Data.Database.Model.StudentLesson studentLesson in studentLessons.Where(s => s.TeacherSubjectGrade.Grade.Id == ggrade &&
																													s.TeacherSubjectGrade.Subject.Id == ssubject && s.Student.Id == student.Id &&
																														s.Date_Of_Lesson.Month == quarterDate.DateOfStart.Month ||
																														s.Date_Of_Lesson.Month == quarterDate.DateOfEnd.Month).OrderBy(s => s.Date_Of_Lesson))
										{
											int c = t;
											for (int i = c; i < quarterDate.DateOfEnd.DayOfYear - quarterDate.DateOfStart.DayOfYear; i++)
											{
												string mark = " ";
												if (studentLesson.Date_Of_Lesson == quarterDate.DateOfStart.AddDays(i) && studentLesson.Mark != null)
												{
													mark = studentLesson.Mark.ToString();
													<td>
														@mark
													</td>
													t = i + 1;
													break;
												}
												else if (studentLesson.Date_Of_Lesson == quarterDate.DateOfStart.AddDays(i) && studentLesson.Appointment != null)
												{
													mark = studentLesson.Appointment;
													<td>
														@mark
													</td>
													t = i + 1;
													break;
												}
												else
												{
													<td></td>
												}
											}

										}
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div>
					<h2>Добавить оценку</h2>
					@foreach (Data.Database.Model.QuarterDate quarterDate in quarterDates.Where(q => q.StudyYear.Years == "2023-2024"
															&& q.Number == qquarter))
					{
						<label for="date">Дата оценки</label>
						<input name="date" type="date" @bind="date" />
						<label for="mark">Оценка/посещение</label>
						<select name="mark" @bind="newmark">
							<option value="2">2</option>
							<option value="3">3</option>
							<option value="4">4</option>
							<option value="5">5</option>
							<option value="Н">Н</option>
							<option value="Н/У">Н/У</option>
							<option value="Н/Б">Н/Б</option>
							<option value="О">О</option>
						</select>
						<label for="student">Ученик</label>
						<select name="student" @bind="sstudent">
							@foreach (Data.Database.Model.Student student in students.Where(s => s.Grade.Id == ggrade))
							{
								<option value="@student.Id">@student.LastName @student.FirstName.Substring(0, 1).@student.Patronymic.Substring(0, 1).</option>
							}
						</select>
						<button type="button" class="btn btn-primary" @onclick="AddMark">Добавить оценку</button>
					}
				</div>
			}
			else if (n == "avg")
			{
				<div>
					<label for="grade">Класс</label>
					<select name="grade" @bind="ggrade">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Grade.Name))
						{
							<option value="@teacherSubjectGrade.Grade.Id">@teacherSubjectGrade.Grade.Name@teacherSubjectGrade.Grade.Subname</option>
						}
					</select>
					<label for="subject">Предмет</label>
					<select name="subject" @bind="ssubject">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Subject.Name))
						{
							<option value="@teacherSubjectGrade.Subject.Id">@teacherSubjectGrade.Subject.Name</option>
						}
					</select>
					@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(tsg => tsg.Teacher.id == 1 &&
							tsg.Grade.Id == ggrade &&
							tsg.Subject.Id == ssubject))
					{
						tsg = teacherSubjectGrade.Id;
					}
				</div>
				<div>
					<table class="table table-striped">
						<thead>
							<tr>
								<th scope="col">ФИО/Четверть</th>
								<th scope="col">1</th>
								<th scope="col">2</th>
								<th scope="col">3</th>
								<th scope="col">4</th>
								<th scope="col">Итоговая оценка</th>
							</tr>
						</thead>
						<tbody>
							@foreach (Data.Database.Model.Student student in students.Where(s => s.Grade.Id == ggrade))
							{
								int? full = 0;
								int d = 0;

								<tr>
									
									<th scope="row">@student.LastName @student.FirstName.Substring(0, 1).@student.Patronymic.Substring(0, 1).</th>
									@foreach (Data.Database.Model.QuarterDate quarterDate in quarterDates.Where(q => q.StudyYear.Years == "2023-2024"))
									{
										int c = 0;
										int? avg = 0;
										@foreach (Data.Database.Model.StudentLesson studentLesson in studentLessons.Where(s => s.TeacherSubjectGrade.Grade.Id == ggrade &&
															s.TeacherSubjectGrade.Subject.Id == ssubject && s.Student.Id == student.Id &&
															s.Date_Of_Lesson.Month == quarterDate.DateOfStart.Month ||
															s.Date_Of_Lesson.Month == quarterDate.DateOfEnd.Month).OrderBy(s => s.Date_Of_Lesson))
										{
											if (studentLesson.Mark != null)
											{
												c += 1;
												avg += studentLesson.Mark;
											}

										}
										@if (c != 0){
											avg = avg / c;
										}
										@if (avg != 0)
										{
											full += avg;
											d++;
										}
										@if (avg == 0)
										{
											<td>-</td>
										}
										else{
										<td>@avg</td>
										}
									}
									@if (d != 0){
										full = full / d; 
									}
									@if (full == 0)
									{
										<td align="center">-</td>
									}
									else{
									<td align="center">@full</td>
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
			else if (n == "apps")
			{
				<div>
					<label for="grade">Класс</label>
					<select name="grade" @bind="ggrade">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Grade.Name))
						{
							<option value="@teacherSubjectGrade.Grade.Id">@teacherSubjectGrade.Grade.Name@teacherSubjectGrade.Grade.Subname</option>
						}
					</select>
				</div>
				<div>
					<table class="table table-striped">
						<thead>
							<tr>

							</tr>
						</thead>
						<tbody>

						</tbody>
					</table>
				</div>
			}
			else if (n == "miss")
			{
				<div>
					<label for="grade">Класс</label>
					<select name="grade" @bind="ggrade">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Grade.Name))
						{
							<option value="@teacherSubjectGrade.Grade.Id">@teacherSubjectGrade.Grade.Name@teacherSubjectGrade.Grade.Subname</option>
						}
					</select>
				</div>
				<div>
					<table class="table table-striped">
						<thead>
							<tr>
								<th scope="col" rowspan="2">ФИО</th>
								<th scope="col" colspan="3">1-ая четверть</th>
								<th scope="col" colspan="3">2-ая четверть</th>
								<th scope="col" colspan="3">3-ая четверть</th>
								<th scope="col" colspan="3">4-ая четверть</th>
								<th scope="col" colspan="3">Весь год</th>
							</tr>
							<tr>
								<th scope="col">всего</th>
								<th scope="col">+ по бол.</th>
								<th scope="col">опоздания</th>
								<th scope="col">всего</th>
								<th scope="col">+ по бол.</th>
								<th scope="col">опоздания</th>
								<th scope="col">всего</th>
								<th scope="col">+ по бол.</th>
								<th scope="col">опоздания</th>
								<th scope="col">всего</th>
								<th scope="col">+ по бол.</th>
								<th scope="col">опоздания</th>
								<th scope="col">всего</th>
								<th scope="col">+ по бол.</th>
								<th scope="col">опоздания</th>
							</tr>
						</thead>
						<tbody>

						</tbody>
					</table>
				</div>
			}
			else if (n == "info")
			{
				<div>
					<label for="grade">Класс</label>
					<select name="grade" @bind="ggrade">
						@foreach (Data.Database.Model.TeacherSubjectGrade teacherSubjectGrade in teacherSubjectGrades.Where(x => x.Teacher.id == 1).DistinctBy(x => x.Grade.Name))
						{
							<option value="@teacherSubjectGrade.Grade.Id">@teacherSubjectGrade.Grade.Name@teacherSubjectGrade.Grade.Subname</option>
						}
					</select>
					<label for="fio">ФИО</label>
					<input name="fio" @bind="fio" />
				</div>
				<div style="height:550px; overflow-y: scroll;">
					<table class="table table-striped">
						<thead>
							<tr>
								<th scope="col">#</th>
								<th scope="col">ФИО</th>
								<th scope="col">Пол</th>
								<th scope="col">Дата рождения</th>
								<th scope="col">Регион</th>
								<th scope="col">Район</th>
								<th scope="col">Населённый пункт</th>
								<th scope="col">Улица</th>
								<th scope="col">Дом</th>
								<th scope="col">Квартира</th>
								<th scope="col">Номер телефона</th>
							</tr>
						</thead>
						<tbody>
							@foreach (Data.Database.Model.Student student in students.Where(x => x.Grade.Id == ggrade).OrderBy(x => x.Grade.Name))
							{
								string fullName = $"{student.LastName} {student.FirstName} {student.Patronymic}";
								var sID = student.Id;
									<tr>
										<th scope="row">@student.Id</th>
										<td>@fullName</td>
										<td>@student.Gender</td>
										<td>@student.DateOfBirth</td>
										<td>@student.Region</td>
										<td>@student.District</td>
										<td>@student.City</td>
										<td>@student.Street</td>
										<td>@student.House</td>
										<td>@student.Apartment</td>
										<td>@student.PhoneNumber</td>
									</tr>
								
							}
						</tbody>
					</table>
				</div>
			}
		}
	</div>
</div>


@code {
	public string n = "marks";

	private bool loading = true;

	public int ggrade = 1;

	public int ssubject = 1;

	public int qquarter = 1;

	public string fio;

	public int tsg;

	public int sstudent;

	public DateOnly date = new DateOnly (2023, 9, 1);

	public string newmark;

	private List<Data.Database.Model.TeacherSubjectGrade> teacherSubjectGrades;

	private List<Data.Database.Model.QuarterDate> quarterDates;

	private List<Data.Database.Model.Student> students;

	private List<Data.Database.Model.StudentLesson> studentLessons;

	private async Task LoadSpecs()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			teacherSubjectGrades = await db.TeacherSubjectGrades.Include(x => x.Teacher).Include(x => x.Subject).Include(x => x.Grade).ToListAsync();
			studentLessons = await db.StudentLessons.Include(x => x.Student).ToListAsync();
			students = await db.Students.Include(x => x.Grade).ToListAsync();
		}
		loading = false;
	}

	private async Task LoadDates()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			quarterDates = await db.QuarterDates.Include(x => x.StudyYear).ToListAsync();
		}
		loading = false;
	}

	private async Task AddMark()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			Data.Database.Model.StudentLesson sl = new Data.Database.Model.StudentLesson();
			sl.StudentId = sstudent;
			sl.Date_Of_Lesson = date;
			if (Check() == true)
			{
				sl.Mark = int.Parse(newmark);
			}
			else if (Check() == false)
			{
				sl.Appointment = newmark;
			}
			sl.TeacherSubjectGradeId = tsg;
			db.StudentLessons.Add(sl);
			await db.SaveChangesAsync();
		}
		StateHasChanged();
		navigation.NavigateTo("/teacher/marks", forceLoad: true);
	}

	private bool Check()
	{
		foreach (char c in newmark)
		{
			if (!char.IsDigit(c))
				return false;
		}
		return true;
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadSpecs();
		await LoadDates();
	}
}
