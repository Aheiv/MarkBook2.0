@page "/admin/schedules"
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.AdminLayout
@rendermode InteractiveServer

<div>
	<div class="container h-50 py-10">
		@if (!loading)
		{
			<table class="table table-striped">
				<thead>
					<tr>
						<th scope="col">#</th>
						<th scope="col">Учитель</th>
						<th scope="col">Предмет</th>
						<th scope="col">Класс</th>
						<th scope="col">День недели</th>
						<th scope="col">Порядок</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Data.Database.Model.Schedule schedule in schedules)
					{
						string teacherFullName = $"{schedule.Teacher.surname} {schedule.Teacher.name} {schedule.Teacher.patronymic}";
						string gradeFull = $"{schedule.Grade.name}{schedule.Grade.subname}";

						<tr>
							<th scope="row">@schedule.id_schedule</th>
							<td>@teacherFullName</td>
							<td>@schedule.Subject.name</td>
							<td>@gradeFull</td>
							<td>@schedule.weekday</td>
							<td>@schedule.order</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>
</div>

@code {
	private bool loading = true;

	private List<Data.Database.Model.Schedule> schedules;

	private async Task LoadSchedules()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			schedules = await db.Schedules.Include(x => x.Teacher).Include(x => x.Grade).Include(x => x.Subject).ToListAsync();
		}
		loading = false;
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadSchedules();
	}
}
