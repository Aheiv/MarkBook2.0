@page "/admin/specializations"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.AdminLayout
@rendermode InteractiveServer

<div>
	<div class="container h-50 py-10">
		@if (!loading)
		{
			<table class="table table-striped">
				<thead>
					<tr>
						<th scope="col">#</th>
						<th scope="col">Предмет</th>
						<th scope="col">ФИО учителя</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Data.Database.Model.Specialization specialization in specializations)
					{
						string teacherFullName = $"{specialization.Teacher.surname} {specialization.Teacher.name} {specialization.Teacher.patronymic}";
						var sID = specialization.id_specialization;
						<tr>
							<th scope="row">@specialization.id_specialization</th>
							<td>@specialization.Subject.name</td>
							<td>@teacherFullName</td>

						</tr>
					}
				</tbody>
			</table>
		}
	</div>
</div>

@code {
	private int RedirectToAS(int n)
	{
		if (n == 0) navigation.NavigateTo("/admin/specializations/addspecializations/0");
		else
		{
			navigation.NavigateTo($"/admin/specializations/addspecializations/{n}");
		}
		return n;
	}
	private bool loading = true;

	private List<Data.Database.Model.Specialization> specializations;

	private async Task LoadSpecs()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			specializations = await db.Specializations.Include(x => x.Teacher).Include(x => x.Subject).ToListAsync();
		}
		loading = false;
	}
	private async Task DeleteSpecialization(int id)
	{
		using (var db = DbFactory.CreateDbContext())
		{
			try
			{
				var specToRemove = await db.Specializations
					.FirstAsync(spec => spec.id_specialization == id);

				db.Specializations.Remove(specToRemove);
				db.SaveChanges();
				StateHasChanged();
				await db.SaveChangesAsync();
				navigation.Refresh(forceReload: true);

			}
			catch
			{
				Exception e = new Exception("ошибка");
			}

		}
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadSpecs();
	}
}
