@page "/admin/parents/addteachers/{n}"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.MainLayout
@rendermode InteractiveServer

<div class="container h-50 py-10">
	<div>
		<div class="d-inline-block">
			<p>Фамилия</p>
		</div>
		<div class="d-inline-block">
			<input @bind-value="Surname" class="rounded">
		</div>
	</div>
	<div>
		<div class="d-inline-block">
			<p>Имя</p>
		</div>
		<div class="d-inline-block">
			<input @bind-value="Name" class="rounded">
		</div>
	</div>
	<div>
		<div class="d-inline-block">
			<p>Отчество</p>
		</div>
		<div class="d-inline-block">
			<input @bind-value="Patronymic" class="rounded">
		</div>
	</div>
	<div>
		@if (n != "0")
		{
			<button type="button" class="btn btn-outline-info" @onclick="AddTeacher">Изменить учителя</button>
		}
		else
		{
			<button type="button" class="btn btn-outline-info" @onclick="AddTeacher">Добавить учителя</button>
		}
	</div>
</div>

@code {
	[Parameter]
	public string n { get; set; }

	private string Surname { get; set; }

	private string Name { get; set; }

	private string? Patronymic { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await OnLoad();
	}

	private async Task OnLoad()
	{
		if (n != "0")
		{
			using (var db = DbFactory.CreateDbContext())
			{
				var teacherToEdit = await db.Teachers
					.FirstAsync(teacher => teacher.id_teacher == int.Parse(n));
				Surname = teacherToEdit.surname;
				Name = teacherToEdit.name;
				Patronymic = teacherToEdit.patronymic;
			}
		}
	}
	private async Task AddTeacher()
	{
		if (n == "0")
		{
			using (var db = DbFactory.CreateDbContext())
			{
				Data.Database.Model.Teacher t = new Data.Database.Model.Teacher();
				t.surname = Surname;
				t.name = Name;
				t.patronymic = Patronymic;
				db.Teachers.Add(t);
				await db.SaveChangesAsync();
			}

		}
		else
		{
			using (var db = DbFactory.CreateDbContext())
			{
				var teacherToEdit = await db.Teachers
					.FirstAsync(teacher => teacher.id_teacher == int.Parse(n));
				teacherToEdit.surname = Surname;
				teacherToEdit.name = Name;
				teacherToEdit.patronymic = Patronymic;
				db.Teachers.Update(teacherToEdit);
				await db.SaveChangesAsync();
			}
		}
		navigation.NavigateTo("/admin/teachers");
	}
}
